{"name":"Vraptor-jasperreport","body":"Vraptor Jasper Report Plugin\r\n======\r\n\r\nReport Generation Plug-in for Vraptor\r\n\r\nSupported File Formats:\r\n\r\n* PDF\r\n* CSV\r\n* XLS\r\n* TXT\r\n* ODT\r\n* HTML\r\n* DOCX\r\n* RTF\r\n* ODS\r\n* PPTX\r\n* XHTML\r\n* XLSX\r\n* IMAGE (PNG and JPEG)\r\n\r\nUsing it\r\n------\r\n\r\n1. \tIn a Maven project's pom.xml file:\r\n\r\n```xml\t \r\n<repositories>\r\n\t<repository>\r\n    \t<id>sonatype-oss-public</id>\r\n        <url>https://oss.sonatype.org/content/groups/public/</url>\r\n    \t<releases>\r\n    \t\t<enabled>true</enabled>\r\n    \t</releases>\r\n    \t<snapshots>\r\n    \t\t<enabled>true</enabled>\r\n\t\t</snapshots>\r\n\t</repository>\t\t\r\n</repositories>  \r\n\r\n<dependency>\r\n\t<groupId>br.com.prixma</groupId>\r\n  \t<artifactId>vraptor-jasperreport</artifactId>\r\n  \t<version>1.0.1</version>\r\n</dependency>\r\n```\r\n\r\n2.\tPut vraptor-jasperreport-version.jar and dependencies in your `WEB-INF/lib` folder.\r\n3.\tCreate a class to represent your report: make it implement the `br.com.caelum.vraptor.jasperreports.Report` interface.\r\n4.\tIn your controller, create an instance of your report and return it from your method\r\n\r\nController\r\n--------\r\n\r\n```java\r\n@Resource\r\npublic class ClientsController {\r\n\r\n\tprivate final Result result;\r\n\tprivate final Clients clients;\r\n\tprivate final ExportFormats formats;\r\n\tprivate final User user;\r\n\t\r\n\tpublic ClientsController(Result result, Clients clients, ExportFormats formats, User user) {\r\n\t\tthis.result = result;\r\n\t\tthis.clients = clients;\r\n\t\tthis.formats = formats;\r\n\t\tthis.user = user;\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/pdf\") \r\n\tpublic Download pdfReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, pdf());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/pdf/encrypted\") \r\n\tpublic Download encryptedPdfReport() {\r\n\t\tReport report = generateReport();\r\n\t\tPdf pdf = ExportFormats.pdf();\r\n\t\tpdf.encrypt(user.getPassword());\r\n\t\tpdf.addPermission(PdfWriter.ALLOW_COPY)\r\n\t\t   .addPermission(PdfWriter.ALLOW_PRINTING);\r\n\t\treturn new ReportDownload(report, pdf);\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/csv\") \r\n\tpublic Download csvReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, csv());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/xls\") \r\n\tpublic Download xlsReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, xls());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/docx\") \r\n\tpublic Download docxReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, docx());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/txt\") \r\n\tpublic Download txtReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, txt());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/odt\") \r\n\tpublic Download odtReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, odt());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/rtf\") \r\n\tpublic Download rtfReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, rtf());\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/report/preview\") \r\n\tpublic Download previewReport() {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, png(), false);\r\n\t}\r\n\t\t\r\n\t@Path(\"/clients/report/{format}\") \r\n\tpublic Download report(String format) {\r\n\t\tReport report = generateReport();\r\n\t\treturn new ReportDownload(report, formats.byExtension(format));\r\n\t}\r\n\t\t\r\n\tprivate Report generateReport(){\r\n\t\tList<Client> data = clients.listAll();\r\n\t\treturn new ClientsReport(data);\r\n\t}\r\n\t\r\n}\r\n```\r\n\r\nReport\r\n--------\r\n\r\n```java\r\npublic class ClientsReport implements Report {\r\n\t\r\n\tprivate final List<Client> data;\r\n\tprivate Map<String, Object> parameters;\r\n\t\t\r\n\tpublic ClientsReport(List<Client> data) {\r\n\t\tthis.data = data;\r\n\t\tthis.parameters = new HashMap<String, Object>();\r\n\t}\r\n\t\r\n\tpublic Report addParameter(String key, Object value) {\r\n\t\tthis.parameters.put(key, value);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tpublic Collection<Client> getData() {\r\n\t\treturn data;\r\n\t}\r\n\t\r\n\tpublic String getFileName() {\r\n\t\treturn \"report\" + System.currentTimeMillis();\r\n\t}\r\n\t\r\n\tpublic Map<String, Object> getParameters() {\r\n\t\treturn this.parameters;\r\n\t}\r\n\t\r\n\tpublic String getTemplate() {\r\n\t\treturn \"report.jasper\";\r\n\t}\r\n\r\n\tpublic boolean isCacheable() {\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n```\r\n\t\r\nBatch Export\r\n------\r\n\r\nSeveral reports can be exported together to form a single resulting document.\r\n\r\n```java\r\npublic Download batchReport(){\r\n\tBatchReportsDownload download = new BatchReportsDownload(pdf());\r\n\tReport header = ...\r\n\tReport content = ...\r\n\tReport footer = ...\r\n\tdownload.add(header, content, footer);\r\n\treturn download;\r\n}\r\n```\r\n\t\r\nNote: Not all exporters can work in batch mode\r\n\t\r\nZip Export\r\n------\r\n\r\nThis option allows you to export reports in different formats and agroup them into a single zip file.\r\n\r\n```java\r\npublic Download zipReport(){\r\n\tReportsDownload download = new ReportsDownload();\r\n\tdownload.add(pdfReport, pdf())\r\n\t\t\t.add(csvReport, csv())\r\n\t\t\t.add(xlsReport, xls())\r\n\t\t\t.add(docxReport, rtf())\r\n\t\t\t.add(odtReport, odt());\r\n\treturn download;\r\n}\r\n```\r\n\r\nAccept header\r\n------\r\n\r\nIf your method return a report, an interceptor tries to discover the request format (through _format or Accept header) and then render the report in \r\nthis format.\r\n\r\n```html\r\n<a href=\"<c:url value=\"/clients/report?_format=csv\"/>\">CSV Report</a>\r\n```\r\n\r\n```java\r\n@Get(\"/clients/report\") \r\npublic Report report() {\r\n\tReport report = ...;\r\n\treturn report;\r\n}\r\n```\r\n\r\nData URIs\r\n------\r\n\r\nThe data URI is a scheme that provides a way to include data in-line in web pages as if they were external resources.\r\nThe scheme is defined in [RFC 2397](http://tools.ietf.org/html/rfc2397 \"RFC 2397\").\r\n\r\nExample 1: Embedding a report in a div\r\n\r\n```java\r\n@Get(\"/clients.json\") \r\npublic void jsonReport(ReportDataURIBuilder builder) {\r\n\tString uri = builder.build(report(), png());\r\n    result.use(json()).withoutRoot().from(uri).serialize();\r\n}\r\n```\r\n\r\nIn your jsp:\r\n\r\n```javascript\r\n$(\"#reportButton\").click(function() {\r\n\t$.getJSON('/clients.json', function(uri) {\r\n\t\t$('#container').append(\"<img src=\\\"\" + uri + \"\\\" />\");\r\n\t});\r\n});\r\n```\r\n\r\nExample 2: Embedding a generic report in a new window\r\n\r\n```java\r\n@Get(\"/clients.json\") \r\npublic void jsonReport(ReportDataURIBuilder builder) {\r\n\tString uri = builder.build(report()); //recognizes the format via _format parameter\r\n    result.use(json()).withoutRoot().from(uri).serialize();\r\n}\r\n```\r\n\r\nIn your jsp:\r\n\r\n```javascript\r\n$(\"#reportButton\").click(function() {\r\n\t$.getJSON('/clients.json?_format=pdf', function(uri) {\r\n\t\twindow.open(uri);\r\n\t});\r\n});\r\n```\r\n\r\nCustomizing paths\r\n------\r\n\r\nBy default the lib will consider only reports under `WEB-INF/reports` folder, but you can also specify a different path format.\r\nFor enabling this you must put this parameters on web.xml:\r\n\r\n```xml\r\n<context-param>\r\n\t<param-name>vraptor.reports.path</param-name>\r\n\t<param-value>custom reports path</param-value>\r\n</context-param>\r\n\t\r\n<context-param>\r\n\t<param-name>vraptor.subreports.path</param-name>\r\n\t<param-value>custom subreports path</param-value>\r\n</context-param>\r\n\t\r\n<context-param>\r\n\t<param-name>vraptor.images.path</param-name>\r\n\t<param-value>custom images path</param-value>\r\n</context-param>\r\n```\r\n\t\r\nThese folders are passed as parameters to reports:\r\n\r\n\t`$P{REPORT_DIR}` directory where the reports are available\r\n\t`$P{SUBREPORT_DIR}` directory where the sub-reports are available\r\n\t`$P{IMAGES_DIR}` directory where the images are available\r\n\r\nSo, to include an image in the report just do: `$P{IMAGES_DIR} + \"image.png\"`\r\n\r\nDecorating reports\r\n------\r\n\r\nDecorators can be used to provide default parameters for all reports, like this\r\n\r\n```java \r\n@Component\r\n@SessionScoped\r\npublic class MyDecorator implements ReportDecorator {\r\n\t\r\n\tprivate final User user;\r\n\t\r\n\tpublic MyDecorator(User user) {\r\n\t\tthis.user = user;\r\n\t}\r\n\t\r\n\tpublic void decorate(Report report) {\r\n\t\treport.addParameter(\"GeneratedBy\", user);\r\n\t}\r\n}\r\n```\r\n\t\r\nNow all reports have a parameter called `$P{GeneratedBy}`.\r\n\r\nUsing Result\r\n------\r\n\r\nAnother way to pass parameters to your report is through the result object.\r\nValues ​​passed to the result are automatically converted into parameters\r\n\r\n```java\r\n@Get(\"/clients/report\") \r\npublic Report report() {\r\n\tresult.include(\"GeneratedBy\", user);\r\n\tReport report = generateReport();\r\n\treturn report;\r\n}\r\n```\r\n\r\nInternationalization\r\n------\r\n\r\nJasperReports lets you associate a `java.util.ResourceBundle` with the report template, at runtime (by providing a value for the built-in `REPORT_RESOURCE_BUNDLE` parameter). \r\nIf your report needs to be generated in a locale that is different from the current one, the built-in `REPORT_LOCALE` parameter can be used to specify the runtime locale when filling the report. \r\nYou just need to put a file called `i18n_en_US.properties` (or whatever) in the same folder of your reports.\r\nHaving done this, parameters such `$R{text.message}`, will be automatically converted to the expected language.\r\n\r\nFor changing this you must put this parameter on web.xml:\r\n\r\n```xml\r\n<context-param>\r\n\t<param-name>vraptor.reports.resourcebundle.name</param-name>\r\n\t<param-value>custom resource bundle name</param-value>\r\n</context-param>\r\n```\r\n\r\nImage Servlet\r\n------\r\n\r\nThis servlet (included in the JasperReports distribution package) is needed as part of your Web application in order to include images in your HTML reports.\r\nTo map this servlet to serve the images that are included in yours report, just do:\r\n\r\n```xml\r\n<servlet>\r\n\t<servlet-name>ImageServlet</servlet-name> \r\n    <servlet-class>net.sf.jasperreports.j2ee.servlets.ImageServlet</servlet-class> \r\n</servlet>  \r\n             \r\n<servlet-mapping> \r\n\t<servlet-name>ImageServlet</servlet-name> \r\n    <url-pattern>/report.image</url-pattern> \r\n</servlet-mapping> \r\n```\r\n   \r\nDependencies\r\n------\r\n\r\n* Commons Logging <http://jakarta.apache.org/commons/logging/>\r\n* Commons Collections <http://jakarta.apache.org/commons/collections/>\r\n* Commons BeanUtils <http://jakarta.apache.org/commons/beanutils/>\r\n* Commons Digester <http://jakarta.apache.org/commons/digester/>\r\n* JFreeChart <http://www.jfree.org/jfreechart/> - Only required when the report contains charts\r\n* iText <http://www.lowagie.com/iText/> - Only required when exporting reports to PDF or RTF\r\n* Jakarta POI <http://jakarta.apache.org/poi/> - Only required when exporting reports to Excel format\r\n* JExcelApi <http://jexcelapi.sourceforge.net/> - Only required when exporting reports to Excel format\r\n","tagline":"A jasper report plugin for vraptor","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}